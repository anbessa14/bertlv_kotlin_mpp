package com.dowhilenotfalse

import kotlin.test.*


internal class BerTlvTest {

    @BeforeTest
    fun setUp() {
    }

    @AfterTest
    fun tearDown() {
    }

    @Test
    fun buildingTLVIsSupported() {
        val berTlv = BerTlv()
        berTlv.addTag(Tag("9F02", "00112233"))

        assertEquals("9F020400112233", berTlv.toString())
    }

    @Test
    fun multibyteTagIsSupported() {
        val tag = Tag(BerTlv.byteArray("9F02"), BerTlv.byteArray("9F03069F1A02"))
        val berTlv = BerTlv(tag.toString())

        assertEquals(1, berTlv.tags.size)
        assertEquals(tag, berTlv.tags[tag.name])
    }

    @Test
    fun primitiveTagHasAValue() {
        val tag = Tag(BerTlv.byteArray("0C"), BerTlv.byteArray("4D7E6C6C6572"))
        val berTlv = BerTlv(tag.toString())

        assertEquals(1, berTlv.tags.size)
        assertEquals(tag, berTlv.tags[tag.name])
    }

    @Test
    fun constructedTagHasChildTags(){
        val parentTag = Tag(BerTlv.byteArray("30"), BerTlv.byteArray("0C064D7E6C6C657202011E010100800100"))
        val childTags = arrayOf(
            Tag(BerTlv.byteArray("0C"), BerTlv.byteArray("4D7E6C6C6572")),
            Tag(BerTlv.byteArray("02"), BerTlv.byteArray("1E")),
            Tag(BerTlv.byteArray("01"), BerTlv.byteArray("00")),
            Tag(BerTlv.byteArray("80"), BerTlv.byteArray("00")),
        )

        val berTlv = BerTlv("30 11 0C 06 4D 7E 6C 6C 65 72 02 01 1E 01 01 00 80 01 00")

        assertEquals(1, berTlv.tags.size)
        val parent = berTlv.tags.values.first()
        assertEquals(parentTag, parent)
        for(child in childTags){ assertEquals(child, parent.children[child.name]) }
    }

    @Test
    fun toStringConstructsTLV(){
        val hex
        val berTlv = BerTlv(hexTLV)
        assertEquals(hexTLV, berTlv.toString())
    }

    @Test
    fun tagCanBeDeleted(){
        val tag = Tag(BerTlv.byteArray("DFEE25"), BerTlv.byteArray("0002"))
        val hex
        val berTlv = BerTlv(hexTLV)
        berTlv.deleteTag(tag)

        assertFalse(berTlv.tags.contains(tag.name))
        assertEquals(hexTLV.replace(tag.toString(), ""), berTlv.toString())
    }

    @Test
    fun tagCanBeDeletedByName(){
        val tag = Tag(BerTlv.byteArray("DFEE25"), BerTlv.byteArray("0002"))
        val hex
        val berTlv = BerTlv(hexTLV)
        berTlv.deleteTag(tag.name)

        assertFalse(berTlv.tags.contains(tag.name))
        assertEquals(hexTLV.replace(tag.toString(), ""), berTlv.toString())
    }

    @Test
    fun tagCanBeAdded(){
        val tag = Tag(BerTlv.byteArray("9F00"), BerTlv.byteArray("0002"))
        val hex
        val berTlv = BerTlv(hexTLV)
        berTlv.addTag(tag)

        assertTrue(berTlv.tags.contains(tag.name))
        assertEquals(hexTLV + tag.toString(), berTlv.toString())
    }


    @Test
    fun tagCanBeUpdated(){
        val hex
        val berTlv = BerTlv(hexTLV)
        val tag = berTlv.tag("DFEE25")
        val originalTagTLV = tag.toString()
        tag?.setValue("010F00")
        val updatedHexTLV = hexTLV.replace(originalTagTLV, "DFEE2503010F00")

        assertEquals(updatedHexTLV, berTlv.toString())
    }

    @Test
    fun lengthHasSingleByteWhenByteArrayLengthUnder128(){
        val byteArray = BerTlv.byteArray(
            "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06"
        )

        val lengthArray = BerTlv.length(byteArray)

        assertEquals(1, lengthArray.size)
        assertEquals(127, lengthArray[0])
    }

    @Test
    fun lengthHas2BytesWhenByteLength128(){
        val byteArray = BerTlv.byteArray(
            "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07"
        )

        val lengthArray = BerTlv.length(byteArray)

        assertEquals(2, lengthArray.size)
        assertEquals(129, lengthArray[0])
        assertEquals(128, lengthArray[1])
    }

    @Test
    fun lengthHas2BytesWhenByteLength255(){
        val byteArray = BerTlv.byteArray(
            "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06"
        )

        val lengthArray = BerTlv.length(byteArray)

        assertEquals(2, lengthArray.size)
        assertEquals(129, lengthArray[0])
        assertEquals(255, lengthArray[1])
    }

    @Test
    fun lengthHas3BytesWhenByteLength256(){
        val byteArray = BerTlv.byteArray(
            "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07"
        )

        val lengthArray = BerTlv.length(byteArray)

        assertEquals(3, lengthArray.size)
        assertEquals(130, lengthArray[0])
        assertEquals(1, lengthArray[1])
        assertEquals(0, lengthArray[2])
    }

    @Test
    fun emvTLVIsSupportted(){
        val berTlv = BerTlv
        assertEquals(44, berTlv.tags.size)
    }

}