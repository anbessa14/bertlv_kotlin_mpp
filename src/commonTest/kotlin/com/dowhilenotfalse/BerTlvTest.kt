package com.dowhilenotfalse

import kotlin.test.*


class BerTlvTest {

    @BeforeTest
    fun setUp() {
    }

    @AfterTest
    fun tearDown() {
    }

    @Test
    fun buildingTLVIsSupported() {
        val berTlv = BerTlv()
        berTlv.addTag(Tag("9F02", "00112233"))

        assertEquals("9F020400112233", berTlv.toString())
    }

    @Test
    fun multibyteTagIsSupported() {
        val berTlv = BerTlv().apply {
            addTags("9F02069F03069F1A02")
        }

        val tag = berTlv.tags["9F02"]

        assertEquals(1, berTlv.tags.size)
        assertNotNull(tag)
        assertEquals("9F03069F1A02", tag.hexValue())
    }

    @Test
    fun primitiveTagHasAValue() {

        val berTlv = BerTlv().apply {
            addTags("0C064D7E6C6C6572")
        }

        val tag = berTlv.tags["0C"]

        assertEquals(1, berTlv.tags.size)
        assertNotNull(tag)
        assertEquals("4D7E6C6C6572", tag.hexValue())
    }

    @Test
    fun constructedTagHasChildTags(){
        val parentTag = Tag(BerTlv.bytes("30"), BerTlv.bytes("0C064D7E6C6C657202011E010100800100"))
        val childTags = arrayOf(
            Tag(BerTlv.bytes("0C"), BerTlv.bytes("4D7E6C6C6572")),
            Tag(BerTlv.bytes("02"), BerTlv.bytes("1E")),
            Tag(BerTlv.bytes("01"), BerTlv.bytes("00")),
            Tag(BerTlv.bytes("80"), BerTlv.bytes("00")),
        )

        val berTlv = BerTlv().apply {
            addTags("30 11 0C 06 4D 7E 6C 6C 65 72 02 01 1E 01 01 00 80 01 00")
        }

        assertEquals(1, berTlv.tags.size)
        val parent = berTlv.tags.values.first()
        assertEquals(parentTag, parent)
        for(child in childTags){ assertEquals(child, parent.children[child.name]) }
    }

    @Test
    fun toStringConstructsTLV(){
        val tags
        val berTlv = BerTlv().apply {
            addTags(tags)
        }

        assertEquals(tags, berTlv.toString())
    }

    @Test
    fun tagCanBeDeleted(){
        val tag = Tag(BerTlv.bytes("DFEE25"), BerTlv.bytes("0002"))
        val tags
        val berTlv = BerTlv().apply {
            addTags(tags)
        }

        berTlv.deleteTag(tag)

        assertFalse(berTlv.tags.contains(tag.name))
        assertEquals(tags.replace(tag.toString(), ""), berTlv.toString())
    }

    @Test
    fun tagCanBeDeletedByName(){
        val tag = Tag(BerTlv.bytes("DFEE25"), BerTlv.bytes("0002"))
        val tags
        val berTlv = BerTlv().apply {
            addTags(tags)
        }

        berTlv.deleteTag(tag.name)

        assertFalse(berTlv.tags.contains(tag.name))
        assertEquals(tags.replace(tag.toString(), ""), berTlv.toString())
    }

    @Test
    fun tagCanBeAdded(){
        val tag = Tag(BerTlv.bytes("9F00"), BerTlv.bytes("0002"))
        val tags
        val berTlv = BerTlv().apply {
            addTags(tags)
        }

        berTlv.addTag(tag)

        assertTrue(berTlv.tags.contains(tag.name))
        assertEquals(tags + tag.toString(), berTlv.toString())
    }


    @Test
    fun tagCanBeUpdated(){
        val tags
        val berTlv = BerTlv().apply {
            addTags(tags)
        }

        val tag = berTlv.tag("DFEE25")
        val originalTagTLV = tag.toString()
        tag?.setHexValue("010F00")
        val updatedtags = tags.replace(originalTagTLV, "DFEE2503010F00")

        assertEquals(updatedtags, berTlv.toString())
    }

    @Test
    fun bytesConvertsIntToArray() {
        val array = BerTlv.bytes(0x9F02)

        assertEquals(0x9F, array[0])
        assertEquals(0x02, array[1])
    }

    @Test
    fun lengthHasSingleByteWhenByteArrayLengthUnder128(){
        val byteArray = BerTlv.bytes(
            "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06"
        )

        val lengthArray = BerTlv.length(byteArray)

        assertEquals(1, lengthArray.size)
        assertEquals(127, lengthArray[0])
    }

    @Test
    fun lengthHas2BytesWhenByteLength128(){
        val byteArray = BerTlv.bytes(
            "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07"
        )

        val lengthArray = BerTlv.length(byteArray)

        assertEquals(2, lengthArray.size)
        assertEquals(129, lengthArray[0])
        assertEquals(128, lengthArray[1])
    }

    @Test
    fun lengthHas2BytesWhenByteLength255(){
        val byteArray = BerTlv.bytes(
            "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06"
        )

        val lengthArray = BerTlv.length(byteArray)

        assertEquals(2, lengthArray.size)
        assertEquals(129, lengthArray[0])
        assertEquals(255, lengthArray[1])
    }

    @Test
    fun lengthHas3BytesWhenByteLength256(){
        val byteArray = BerTlv.bytes(
            "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00 01 02 03" +
                    "00 01 02 03 04 05 06 07"
        )

        val lengthArray = BerTlv.length(byteArray)

        assertEquals(3, lengthArray.size)
        assertEquals(130, lengthArray[0])
        assertEquals(1, lengthArray[1])
        assertEquals(0, lengthArray[2])
    }

    @Test
    fun emvTLVIsSupported(){
        val tags = "DFEE25020002DFEE26022000DFEE120A62994900000000000074DFEF5D105128CCCCCCCC2877D1801622CCCCCCCC57189F7E8B5A206B4F2CEA931148704EC549EDBAB728643E9197DFEF5B085128CCCCCCCC28775A10B5DECD79E3D200A6DE66A20C18DE80AC5F201A2F434849502054455354204341524420202020202020202020205F24031801315F25031501015F280208405F2A0208405F2D02656E5F3401005F57010050104465626974204D6173746572436172644F07A0000000041010820239008407A00000000410108C219F02069F03069F1A0295055F2A029A039C019F37049F35019F45029F4C089F34038D0C910A8A0295059F37049F4C088E1200000000000000004203440341031E031F039C01009F02060000000000009F03060000000000009F10120110200005620400000000000000000000FF9F13009F20009F2608C837A85C5DFE75739F2701009F34031E03009F360202669F3704BB8050C99F38009F3901079F4D009F4F00950504000000009B02E8008A025A3399009F5B00DFEF4C06002100000000DFEF4D28AA839B4B402083DDEC00614D1703B139A07586453583B4A03AB333FB210FD1CD4F8AC3603D75688E"
        val berTlv = BerTlv().apply {
            addTags(tags)
        }

        assertEquals(44, berTlv.tags.size)
    }


    @Test()
    fun tlvWithInvalidTagValueLengthThrowsTagException(){
        val tags = "70 81 C0 8F 01 04 9F 32 01 03 92 24 9F FB FB 7F EE C7 B0 43 67 B3 E4 C6 71 C3 0B 4A EE AD A2 C1 04 D1 50 EA FD 3C 05 2C 97 0E 8D 78 E3 33 2B 72 0F 4F E4 1D 7C 1B EF 14 E4 E3 6F 80 90 A1 42 B7 E1 B1 7D DE CF AA 80 FC B4 BF 04 1C 2D 44 04 AD 1E 7F 19 C9 56 5B 93 7F 5E B5 02 90 6F EE 32 F5 21 E5 32 AB FC 37 F0 46 1E 91 AA 46 79 8D 74 C4 BA FA 08 81 A3 0E 1F 9B B8 7A B7 85 C7 E2 9A 45 46 D1 B7 FD 6F 98 A4 65 19 FB 7F 53 20 3A 93 AA C9 5C 5B 53 B8 CC 6E 9A D3 DB C9 25 CC 72 B9 6E DD 78 3B B0 D7 B6 E8 E9 78 BB 35 5E 45 5E 7A 5B CA 57 C4 95"
        val exception = assertFailsWith<TagException> {
            BerTlv().apply {
                addTags(tags)
            }
        }

        assertEquals("D1", exception.tag.name)
        assertEquals(IntRange(127,143), exception.intRange)
    }

    @Test()
    fun tlvWithOnlyTagThrowsTagException(){
        val tags = "9F9F9F"
        val exception = assertFailsWith<TagException> {
            BerTlv().apply {
                addTags(tags)
            }

        }

        assertEquals(tags, exception.tag.name)
        assertEquals(IntRange(0,3), exception.intRange)
    }

}